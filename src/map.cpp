/*
 * This file is part of MCServerAdmin.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright (c) 2014 Sergio M. Afonso Fumero <theSkatrak@gmail.com>
 */

#include "map.h"

#include <QTextStream>
#include <QDate>

Map::Map(Server* svr, QString nm)
  : server(svr), name(nm), resource_pack(""), max_players(DEFAULT_MAX_PLAYERS),
    command_block(DEFAULT_COMMAND_BLOCK), difficulty(DEFAULT_DIFFICULTY),
    game_mode(DEFAULT_GAME_MODE), force_game_mode(DEFAULT_FORCE_GAME_MODE),
    hardcore(DEFAULT_HARDCORE), idle_timeout(DEFAULT_IDLE_TIMEOUT),
    view_distance(DEFAULT_VIEW_DISTANCE), allow_flight(DEFAULT_FLIGHT),
    allow_nether(DEFAULT_NETHER), pvp(DEFAULT_PVP), seed(""),
    level_type(DEFAULT_LEVEL_TYPE), max_build_height(DEFAULT_MAX_BUILD_HEIGHT),
    generate_structures(DEFAULT_GENERATE_STRUCTURES),
    spawn_protection_radius(DEFAULT_SPAWN_PROTECTION_RADIUS),
    spawn_animals(DEFAULT_SPAWN_ANIMALS), spawn_monsters(DEFAULT_SPAWN_MONSTERS),
    spawn_npcs(DEFAULT_SPAWN_NPCS) {
  if (server)
    server->addMap(this);
}


Map::Map(const Map& m)
  : server(m.server), name(m.name), resource_pack(m.resource_pack),
    max_players(m.max_players), command_block(m.command_block),
    difficulty(m.difficulty), game_mode(m.game_mode),
    force_game_mode(m.force_game_mode), hardcore(m.hardcore),
    idle_timeout(m.idle_timeout), view_distance(m.view_distance),
    allow_flight(m.allow_flight), allow_nether(m.allow_nether), pvp(m.pvp),
    seed(m.seed), level_type(m.level_type), max_build_height(m.max_build_height),
    generate_structures(m.generate_structures),
    spawn_protection_radius(m.spawn_protection_radius),
    spawn_animals(m.spawn_animals), spawn_monsters(m.spawn_monsters),
    spawn_npcs(m.spawn_npcs) {
  if (server)
    server->addMap(this);
}

Map::~Map() {
  if (server)
    server->removeMap(this);
}

QString boolToString(bool b) {
  return QString(b? "true" : "false");
}

QString levelTypeToString(LevelType lt) {
  switch (lt) {
  case DEFAULT:
    return "DEFAULT";
  case SUPERFLAT:
    return "FLAT";
  case LARGE_BIOMES:
    return "LARGEBIOMES";
  case AMPLIFIED:
    return "AMPLIFIED";
  default:
    return "";
  }
}

bool Map::createServerProperties(QIODevice& file) const {
  if (!file.isOpen()) {
    file.open(QIODevice::WriteOnly | QIODevice::Text);
    if (!file.isOpen())
      return false;
  }

  if (file.isWritable()) {
    QTextStream out(&file);

    // Header
    out << "# Minecraft server properties" << endl;
    out << "# File generated by MCServerAdmin. Created by SKATRAK." << endl;
    out << "# Any changes made to this file won't be automatically updated in MCServerAdmin." << endl;
    out << "# " << QDate::currentDate().toString(Qt::SystemLocaleLongDate) << endl;

    // Server information
    if (server) {
      const quint8* address = server->getIPAddress();
      out << "server-name=" << server->getName() << endl;
      out << "motd=" << server->getMessageOfTheDay() << endl;
      if (address[0] || address[1] || address[2] || address[3])
        out << "server-ip=" << address[0] << "." << address[1] << "." << address[2] << "." << address[3] << endl;
      out << "server-port=" << server->getPort() << endl;
      out << "online-mode=" << boolToString(server->isOnline()) << endl;
      out << "announce-player-achievements=" << boolToString(server->areAchievementsAnnounced()) << endl;
      out << "snooper-enabled=" << boolToString(server->isSnooperEnabled()) << endl;
      out << "white-list=" << boolToString(server->hasWhiteList()) << endl;
      out << "op-permission-level=" << server->getOpPermissionLevel() << endl;
      out << "enable-query=" << boolToString(server->isQueryEnabled()) << endl;
      out << "query.port=" << server->getQueryPort() << endl;
      out << "enable-rcon=" << boolToString(server->isRemoteConsoleEnabled()) << endl;
      out << "rcon.password=" << server->getRconPassword() << endl;
      out << "rcon.port=" << server->getRconPort() << endl;
    }

    // Map information
    out << "level-name=" << name << endl;
    out << "resource-pack=" << resource_pack << endl;
    out << "max-players=" << max_players << endl;
    out << "enable-command-block=" << boolToString(command_block) << endl;
    out << "difficulty=" << difficulty << endl;
    out << "gamemode=" << game_mode << endl;
    out << "force-gamemode=" << boolToString(force_game_mode) << endl;
    out << "hardcore=" << boolToString(hardcore) << endl;
    out << "player-idle-timeout=" << idle_timeout << endl;
    out << "view-distance=" << view_distance << endl;
    out << "allow-flight=" << boolToString(allow_flight) << endl;
    out << "allow-nether=" << boolToString(allow_nether) << endl;
    out << "pvp=" << boolToString(pvp) << endl;
    out << "level-seed=" << seed << endl;
    out << "level-type=" << levelTypeToString(level_type) << endl;
    out << "max-build-height=" << max_build_height << endl;
    out << "generate-structures=" << boolToString(generate_structures) << endl;
    out << "spawn-protection=" << spawn_protection_radius << endl;
    out << "spawn-animals=" << boolToString(spawn_animals) << endl;
    out << "spawn-monsters=" << boolToString(spawn_monsters) << endl;
    out << "spawn-npcs=" << boolToString(spawn_npcs) << endl;

    return true;
  }

  return false;
}

Map& Map::operator= (const Map& m) {
  setServer(m.server);
  name = m.name;
  resource_pack = m.resource_pack;
  max_players = m.max_players;
  command_block = m.command_block;
  difficulty = m.difficulty;
  game_mode = m.game_mode;
  force_game_mode = m.force_game_mode;
  hardcore = m.hardcore;
  idle_timeout = m.idle_timeout;
  view_distance = m.view_distance;
  allow_flight = m.allow_flight;
  allow_nether = m.allow_nether;
  pvp = m.pvp;
  seed = m.seed;
  level_type = m.level_type;
  max_build_height = m.max_build_height;
  generate_structures = m.generate_structures;
  spawn_protection_radius = m.spawn_protection_radius;
  spawn_animals = m.spawn_animals;
  spawn_monsters = m.spawn_monsters;
  spawn_npcs = m.spawn_npcs;

  return *this;
}

QDataStream& operator<<(QDataStream& ds, const Map& m) {
  ds << m.getName() << m.getResourcePack() << m.getMaxPlayers() << m.getCommandBlock()
     << m.getDifficulty() << m.getGameMode() << m.isGameModeForced() << m.isHardcore()
     << m.getIdleTimeout() << m.getViewDistance() << m.isFlightAllowed()
     << m.isNetherAllowed() << m.isPVP() << m.getSeed() << m.getLevelType()
     << m.getMaxBuildHeight() << m.doStructuresGenerate() << m.getSpawnProtectionRadius()
     << m.doAnimalsSpawn() << m.doMonstersSpawn() << m.doNpcsSpawn();
  return ds;
}

QDataStream& operator>>(QDataStream& ds, Map& m) {
  QString sBuffer;
  bool bBuffer;
  int iBuffer;
  unsigned players;

  ds >> sBuffer;
  m.setName(sBuffer);
  ds >> sBuffer;
  m.setResourcePack(sBuffer);
  ds >> players;
  m.setMaxPlayers(players);
  ds >> bBuffer;
  m.setCommandBlock(bBuffer);

  ds >> iBuffer;
  m.setDifficulty(static_cast<GameDifficulty>(iBuffer));
  ds >> iBuffer;
  m.setGameMode(static_cast<GameMode>(iBuffer));
  ds >> bBuffer;
  m.setGameModeForced(bBuffer);
  ds >> bBuffer;
  m.setHardcore(bBuffer);
  ds >> iBuffer;
  m.setIdleTimeout(iBuffer);
  ds >> iBuffer;
  m.setViewDistance(iBuffer);
  ds >> bBuffer;
  m.setFlightAllowed(bBuffer);
  ds >> bBuffer;
  m.setNetherAllowed(bBuffer);
  ds >> bBuffer;
  m.setPVP(bBuffer);

  ds >> sBuffer;
  m.setSeed(sBuffer);
  ds >> iBuffer;
  m.setLevelType(static_cast<LevelType>(iBuffer));
  ds >> iBuffer;
  m.setMaxBuildHeight(iBuffer);
  ds >> bBuffer;
  m.setStructuresGenerate(bBuffer);
  ds >> iBuffer;
  m.setSpawnProtectionRadius(iBuffer);
  ds >> bBuffer;
  m.setAnimalsSpawn(bBuffer);
  ds >> bBuffer;
  m.setMonstersSpawn(bBuffer);
  ds >> bBuffer;
  m.setNpcsSpawn(bBuffer);

  return ds;
}
